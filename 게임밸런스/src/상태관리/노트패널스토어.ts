import { create } from 'zustand'
import { persist } from 'zustand/middleware'

// 임시 타입 정의 (나중에 Supabase 연동 시 확장)
export interface 채팅메시지타입 {
  아이디: string;
  텍스트: string;
  타임스탬프: Date;
  작성자?: string;
  키워드목록?: string[]; // 자동 추출된 키워드들
  관련도점수?: number; // 현재 입력 중인 텍스트와의 유사도
}

export interface 메모타입 {
  아이디: string;
  텍스트: string;
  생성시간: Date;
}

interface 노트패널상태타입 {
  // UI 상태
  패널열림: boolean;
  상하분할비율: number;
  메모창확장: boolean;
  
  // 데이터 상태
  채팅메시지목록: 채팅메시지타입[];
  빠른메모목록: 메모타입[];
  관련노트목록: 채팅메시지타입[]; // 현재 입력과 관련된 노트들
  현재입력텍스트: string; // 실시간 입력 추적
  
  // 액션들
  패널토글: () => void;
  패널열기: () => void;
  패널닫기: () => void;
  분할비율변경: (비율: number) => void;
  메모창토글: () => void;
  
  // 데이터 액션들 (임시 - 나중에 Supabase로 교체)
  메시지추가: (텍스트: string) => void;
  메모추가: (텍스트: string) => void;
  메시지삭제: (아이디: string) => void;
  메모삭제: (아이디: string) => void;
  
  // 관련 노트 기능
  입력텍스트업데이트: (텍스트: string) => void;
  관련노트찾기: (입력텍스트: string) => void;
}

export const 노트패널스토어 = create<노트패널상태타입>()(
  persist(
    (set) => ({
      // 초기 상태
      패널열림: false,
      상하분할비율: 0.6,
      메모창확장: false,
      관련노트목록: [],
      현재입력텍스트: '',
      채팅메시지목록: [
        {
          아이디: '1',
          텍스트: '캐릭터 밸런스 조정 필요',
          타임스탬프: new Date('2024-01-15 14:30'),
        },
        {
          아이디: '2',
          텍스트: '강철 전사의 공격력이 너무 높음',
          타임스탬프: new Date('2024-01-15 15:20'),
        },
        {
          아이디: '3',
          텍스트: '화염 마법사 사거리 3 → 2로 조정 고려',
          타임스탬프: new Date('2024-01-15 16:10'),
        },
        {
          아이디: '4',
          텍스트: '강철 전사 방어력도 같이 너프해야 함',
          타임스탬프: new Date('2024-01-16 09:15'),
        },
        {
          아이디: '5',
          텍스트: '화염 마법사 데미지는 그대로 두고 사거리만 줄이자',
          타임스탬프: new Date('2024-01-16 10:30'),
        },
        {
          아이디: '6',
          텍스트: '전체적으로 게임 밸런스가 공격 위주로 치우쳐져 있음',
          타임스탬프: new Date('2024-01-16 11:45'),
        },
        {
          아이디: '7',
          텍스트: '마법사 캐릭터들의 마나 소모량 증가 검토',
          타임스탬프: new Date('2024-01-16 13:20'),
        },
        {
          아이디: '8',
          텍스트: '아이템 밸런스도 캐릭터와 함께 조정 필요',
          타임스탬프: new Date('2024-01-16 14:10'),
        },
        {
          아이디: '9',
          텍스트: '강철 전사 vs 화염 마법사 매치업이 5:5가 되도록',
          타임스탬프: new Date('2024-01-16 15:30'),
        },
        {
          아이디: '10',
          텍스트: '게임 테스트 결과 전사가 너무 강함',
          타임스탬프: new Date('2024-01-17 09:00'),
        },
        {
          아이디: '11',
          텍스트: '마법사 스킬 쿨다운 시간 단축 고려',
          타임스탬프: new Date('2024-01-17 10:15'),
        },
        {
          아이디: '12',
          텍스트: '밸런스 패치 우선순위: 1.전사 공격력, 2.마법사 사거리',
          타임스탬프: new Date('2024-01-17 11:30'),
        },
        {
          아이디: '13',
          텍스트: '시뮬레이션 돌려봤는데 전사 승률 65%',
          타임스탬프: new Date('2024-01-17 14:20'),
        },
        {
          아이디: '14',
          텍스트: '게임 플레이 데이터 분석 결과 정리 필요',
          타임스탬프: new Date('2024-01-17 16:45'),
        },
        {
          아이디: '15',
          텍스트: '다음 패치에서 전사 공격력 10% 너프 확정',
          타임스탬프: new Date('2024-01-18 09:30'),
        }
      ],
      빠른메모목록: [
        {
          아이디: '1',
          텍스트: '시뮬레이션 결과 검토 필요',
          생성시간: new Date('2024-01-15 16:45'),
        },
        {
          아이디: '2',
          텍스트: '아이템 가격 밸런스 조정',
          생성시간: new Date('2024-01-15 16:30'),
        }
      ],

      // UI 액션들
      패널토글: () => {
        set(상태 => ({ 패널열림: !상태.패널열림 }))
      },
      
      패널열기: () => {
        set({ 패널열림: true })
      },
      
      패널닫기: () => {
        set({ 패널열림: false })
      },
      
      분할비율변경: (비율: number) => {
        set({ 상하분할비율: 비율 })
      },
      
      메모창토글: () => {
        set(상태 => ({ 메모창확장: !상태.메모창확장 }))
      },

      // 데이터 액션들 (임시 구현)
      메시지추가: (텍스트: string) => {
        const 새메시지: 채팅메시지타입 = {
          아이디: Date.now().toString(),
          텍스트: 텍스트.trim(),
          타임스탬프: new Date(),
        }
        
        set(상태 => ({
          채팅메시지목록: [...상태.채팅메시지목록, 새메시지]
        }))
      },
      
      메모추가: (텍스트: string) => {
        const 새메모: 메모타입 = {
          아이디: Date.now().toString(),
          텍스트: 텍스트.trim(),
          생성시간: new Date(),
        }
        
        set(상태 => ({
          빠른메모목록: [새메모, ...상태.빠른메모목록]
        }))
      },
      
      메시지삭제: (아이디: string) => {
        set(상태 => ({
          채팅메시지목록: 상태.채팅메시지목록.filter(메시지 => 메시지.아이디 !== 아이디)
        }))
      },
      
      메모삭제: (아이디: string) => {
        set(상태 => ({
          빠른메모목록: 상태.빠른메모목록.filter(메모 => 메모.아이디 !== 아이디)
        }))
      },

      // 관련 노트 기능 구현
      입력텍스트업데이트: (텍스트: string) => {
        set({ 현재입력텍스트: 텍스트 })
        
        // 입력이 3글자 이상일 때만 관련 노트 찾기
        if (텍스트.trim().length >= 3) {
          // 100ms 디바운스로 성능 최적화
          setTimeout(() => {
            // 관련노트찾기 함수를 직접 호출
            set((상태) => {
              if (!텍스트.trim()) {
                return { 관련노트목록: [] }
              }
              
              const 입력키워드들 = 텍스트.toLowerCase().split(/\s+/).filter(word => word.length > 1)
              
              // 각 메시지의 관련도 점수 계산
              const 점수매겨진메시지들 = 상태.채팅메시지목록.map(메시지 => {
                const 메시지키워드들 = 메시지.텍스트.toLowerCase().split(/\s+/)
                
                // 단순 키워드 매칭 점수 (나중에 더 정교한 NLP로 개선 가능)
                let 관련도점수 = 0
                입력키워드들.forEach(입력키워드 => {
                  메시지키워드들.forEach(메시지키워드 => {
                    if (메시지키워드.includes(입력키워드) || 입력키워드.includes(메시지키워드)) {
                      관련도점수 += 1
                    }
                  })
                })
                
                // 최근 메시지일수록 약간 가중치 추가
                const 시간가중치 = Math.max(0, 1 - (Date.now() - 메시지.타임스탬프.getTime()) / (1000 * 60 * 60 * 24 * 30)) * 0.1
                
                return {
                  ...메시지,
                  관련도점수: 관련도점수 + 시간가중치
                }
              })
              
              // 점수순으로 정렬하고 상위 3개만 반환
              const 관련노트들 = 점수매겨진메시지들
                .filter(메시지 => 메시지.관련도점수 > 0)
                .sort((a, b) => (b.관련도점수 || 0) - (a.관련도점수 || 0))
                .slice(0, 3)
              
              return { 관련노트목록: 관련노트들 }
            })
          }, 100)
        } else {
          set({ 관련노트목록: [] })
        }
      },

      관련노트찾기: (입력텍스트: string) => {
        set((상태) => {
          if (!입력텍스트.trim()) {
            return { 관련노트목록: [] }
          }
          
          const 입력키워드들 = 입력텍스트.toLowerCase().split(/\s+/).filter(word => word.length > 1)
          
          // 각 메시지의 관련도 점수 계산
          const 점수매겨진메시지들 = 상태.채팅메시지목록.map(메시지 => {
            const 메시지키워드들 = 메시지.텍스트.toLowerCase().split(/\s+/)
            
            // 단순 키워드 매칭 점수 (나중에 더 정교한 NLP로 개선 가능)
            let 관련도점수 = 0
            입력키워드들.forEach(입력키워드 => {
              메시지키워드들.forEach(메시지키워드 => {
                if (메시지키워드.includes(입력키워드) || 입력키워드.includes(메시지키워드)) {
                  관련도점수 += 1
                }
              })
            })
            
            // 최근 메시지일수록 약간 가중치 추가
            const 시간가중치 = Math.max(0, 1 - (Date.now() - 메시지.타임스탬프.getTime()) / (1000 * 60 * 60 * 24 * 30)) * 0.1
            
            return {
              ...메시지,
              관련도점수: 관련도점수 + 시간가중치
            }
          })
          
          // 점수순으로 정렬하고 상위 3개만 반환
          const 관련노트들 = 점수매겨진메시지들
            .filter(메시지 => 메시지.관련도점수 > 0)
            .sort((a, b) => (b.관련도점수 || 0) - (a.관련도점수 || 0))
            .slice(0, 3)
          
          return { 관련노트목록: 관련노트들 }
        })
      },
    }),
    {
      name: '게임밸런스-노트패널',
      // UI 상태만 저장, 데이터는 나중에 Supabase에서 관리
      partialize: (상태) => ({
        상하분할비율: 상태.상하분할비율,
        메모창확장: 상태.메모창확장,
      })
    }
  )
)