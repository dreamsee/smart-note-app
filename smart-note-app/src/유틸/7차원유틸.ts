import { 
  우선순위차원타입, 
  감정차원타입, 
  맥락차원타입,
  우선순위레벨타입,
  긴급도타입,
  중요도타입,
  기본감정타입,
  감정강도타입,
  텍스트톤타입,
  기분상태타입,
  상황유형타입,
  작성목적타입,
  환경정보타입,
  위치정보타입
} from '../타입';

// ==============================================
// 5차원: 우선순위/중요도 관련 유틸리티
// ==============================================

/**
 * 기본 우선순위 설정을 생성합니다
 */
export const 기본우선순위차원생성 = (): 우선순위차원타입 => ({
  우선순위레벨: 3,
  긴급도: '언젠가',
  중요도매트릭스: {
    긴급하고중요함: false,
    중요하지만긴급하지않음: false,
    긴급하지만중요하지않음: false,
    긴급하지도중요하지도않음: true
  }
});

/**
 * 우선순위 레벨을 텍스트로 변환합니다
 */
export const 우선순위레벨텍스트변환 = (레벨: 우선순위레벨타입): string => {
  const 레벨맵 = {
    1: '🔴 최고',
    2: '🟠 높음', 
    3: '🟡 보통',
    4: '🟢 낮음',
    5: '⚪ 최저'
  };
  return 레벨맵[레벨];
};

/**
 * 긴급도에 따른 색상을 반환합니다
 */
export const 긴급도색상가져오기 = (긴급도: 긴급도타입): string => {
  const 색상맵 = {
    '즉시': '#dc3545',
    '당일': '#fd7e14', 
    '이번주': '#ffc107',
    '이번달': '#28a745',
    '언젠가': '#6c757d'
  };
  return 색상맵[긴급도];
};

/**
 * 아이젠하워 매트릭스 사분면을 판단합니다
 */
export const 중요도매트릭스사분면판단 = (중요도: 중요도타입): 1 | 2 | 3 | 4 => {
  if (중요도.긴급하고중요함) return 1;
  if (중요도.중요하지만긴급하지않음) return 2;
  if (중요도.긴급하지만중요하지않음) return 3;
  return 4;
};

/**
 * 우선순위 점수를 계산합니다 (1-100점)
 */
export const 우선순위점수계산 = (우선순위: 우선순위차원타입): number => {
  let 점수 = 0;
  
  // 우선순위 레벨 (40점)
  점수 += (6 - 우선순위.우선순위레벨) * 8;
  
  // 긴급도 (30점)
  const 긴급도점수맵 = { '즉시': 30, '당일': 24, '이번주': 18, '이번달': 12, '언젠가': 6 };
  점수 += 긴급도점수맵[우선순위.긴급도];
  
  // 중요도 매트릭스 (30점)
  const 사분면 = 중요도매트릭스사분면판단(우선순위.중요도매트릭스);
  점수 += (5 - 사분면) * 7.5;
  
  return Math.min(100, Math.max(0, 점수));
};

// ==============================================
// 6차원: 감정/톤 관련 유틸리티
// ==============================================

/**
 * 기본 감정 차원을 생성합니다
 */
export const 기본감정차원생성 = (): 감정차원타입 => ({
  기분상태: {
    주감정: '기쁨',
    전체강도: 5,
    에너지레벨: 3
  },
  텍스트톤: '중립적'
});

/**
 * 감정을 이모지로 변환합니다
 */
export const 감정이모지변환 = (감정: 기본감정타입): string => {
  const 감정이모지맵 = {
    '기쁨': '😊',
    '슬픔': '😢',
    '분노': '😠',
    '두려움': '😨',
    '놀람': '😲',
    '혐오': '🤢'
  };
  return 감정이모지맵[감정];
};

/**
 * 감정 강도에 따른 색상을 반환합니다
 */
export const 감정강도색상가져오기 = (강도: 감정강도타입): string => {
  if (강도 <= 2) return '#28a745'; // 낮음: 초록
  if (강도 <= 4) return '#17a2b8'; // 약간: 파랑  
  if (강도 <= 6) return '#ffc107'; // 보통: 노랑
  if (강도 <= 8) return '#fd7e14'; // 높음: 주황
  return '#dc3545'; // 매우높음: 빨강
};

/**
 * 텍스트 톤에 따른 스타일을 반환합니다
 */
export const 텍스트톤스타일가져오기 = (톤: 텍스트톤타입): { color: string; fontStyle?: string } => {
  const 톤스타일맵: Record<텍스트톤타입, { color: string; fontStyle?: string }> = {
    '공식적': { color: '#343a40' },
    '비공식적': { color: '#6c757d' },
    '친근한': { color: '#28a745' },
    '차가운': { color: '#17a2b8' },
    '긍정적': { color: '#28a745' },
    '부정적': { color: '#dc3545' },
    '중립적': { color: '#6c757d' },
    '유머러스': { color: '#ffc107', fontStyle: 'italic' },
    '진지한': { color: '#343a40' },
    '캐주얼한': { color: '#17a2b8' },
    '비판적': { color: '#fd7e14' },
    '칭찬하는': { color: '#28a745' }
  };
  return 톤스타일맵[톤];
};

/**
 * 감정 변화 추이를 분석합니다
 */
export const 감정변화추이분석 = (이전상태?: 기분상태타입, 현재상태?: 기분상태타입): string => {
  if (!이전상태 || !현재상태) return '변화 없음';
  
  const 강도차이 = 현재상태.전체강도 - 이전상태.전체강도;
  const 에너지차이 = 현재상태.에너지레벨 - 이전상태.에너지레벨;
  
  if (강도차이 > 2) return '감정 상승 📈';
  if (강도차이 < -2) return '감정 하락 📉';
  if (에너지차이 > 1) return '에너지 증가 ⚡';
  if (에너지차이 < -1) return '에너지 감소 🔋';
  
  return '안정적 😌';
};

// ==============================================
// 7차원: 맥락/상황 관련 유틸리티
// ==============================================

/**
 * 기본 맥락 차원을 생성합니다
 */
export const 기본맥락차원생성 = (): 맥락차원타입 => ({
  상황유형: '개인',
  환경정보: {
    집중도: 3
  },
  작성목적: '기록'
});

/**
 * 상황 유형에 따른 아이콘을 반환합니다
 */
export const 상황유형아이콘가져오기 = (상황: 상황유형타입): string => {
  const 상황아이콘맵 = {
    '업무': '💼',
    '학습': '📚',
    '개인': '👤',
    '가족': '👨‍👩‍👧‍👦',
    '친구': '👥',
    '취미': '🎨',
    '회의': '🤝',
    '브레인스토밍': '💡',
    '검토': '🔍',
    '계획': '📋',
    '실행': '🚀',
    '회고': '🔄'
  };
  return 상황아이콘맵[상황];
};

/**
 * 작성 목적에 따른 색상을 반환합니다
 */
export const 작성목적색상가져오기 = (목적: 작성목적타입): string => {
  const 목적색상맵 = {
    '기록': '#6c757d',
    '정리': '#17a2b8',
    '계획': '#28a745',
    '아이디어': '#ffc107',
    '문제해결': '#fd7e14',
    '학습': '#007bff',
    '공유': '#20c997',
    '보고': '#6f42c1',
    '검토': '#e83e8c',
    '임시메모': '#adb5bd'
  };
  return 목적색상맵[목적];
};

/**
 * 집중도 레벨을 텍스트로 변환합니다
 */
export const 집중도텍스트변환 = (집중도?: number): string => {
  if (!집중도) return '알 수 없음';
  
  const 집중도맵 = {
    1: '매우 산만 😵‍💫',
    2: '산만함 😔',
    3: '보통 😐',
    4: '집중됨 😊',
    5: '매우 집중 🎯'
  };
  return 집중도맵[집중도 as keyof typeof 집중도맵] || '알 수 없음';
};

/**
 * 장소 유형에 따른 아이콘을 반환합니다
 */
export const 장소유형아이콘가져오기 = (장소?: '집' | '사무실' | '카페' | '학교' | '야외' | '이동중' | '기타'): string => {
  if (!장소) return '📍';
  
  const 장소아이콘맵 = {
    '집': '🏠',
    '사무실': '🏢',
    '카페': '☕',
    '학교': '🏫',
    '야외': '🌳',
    '이동중': '🚗',
    '기타': '📍'
  };
  return 장소아이콘맵[장소];
};

// ==============================================
// 통합 유틸리티 함수들
// ==============================================

/**
 * 7차원 데이터 유효성을 검사합니다
 */
export const 차원데이터유효성검사 = {
  우선순위: (데이터: 우선순위차원타입): boolean => {
    return 데이터.우선순위레벨 >= 1 && 데이터.우선순위레벨 <= 5;
  },
  
  감정: (데이터: 감정차원타입): boolean => {
    const 유효한감정들: 기본감정타입[] = ['기쁨', '슬픔', '분노', '두려움', '놀람', '혐오'];
    return 유효한감정들.includes(데이터.기분상태.주감정);
  },
  
  맥락: (데이터: 맥락차원타입): boolean => {
    return 데이터.환경정보.집중도! >= 1 && 데이터.환경정보.집중도! <= 5;
  }
};

/**
 * 7차원 데이터를 요약 텍스트로 변환합니다
 */
export const 차원데이터요약생성 = (
  우선순위?: 우선순위차원타입,
  감정?: 감정차원타입,
  맥락?: 맥락차원타입
): string => {
  const 요약부분들: string[] = [];
  
  if (우선순위) {
    요약부분들.push(`우선순위: ${우선순위레벨텍스트변환(우선순위.우선순위레벨)}`);
  }
  
  if (감정) {
    요약부분들.push(`감정: ${감정이모지변환(감정.기분상태.주감정)} ${감정.기분상태.전체강도}/10`);
  }
  
  if (맥락) {
    요약부분들.push(`상황: ${상황유형아이콘가져오기(맥락.상황유형)} ${맥락.상황유형}`);
  }
  
  return 요약부분들.join(' | ') || '차원 정보 없음';
};

/**
 * 기본 7차원 데이터 세트를 생성합니다
 */
export const 기본7차원데이터생성 = () => ({
  우선순위차원: 기본우선순위차원생성(),
  감정차원: 기본감정차원생성(),
  맥락차원: 기본맥락차원생성()
});

/**
 * 마감일까지 남은 시간을 계산합니다
 */
export const 마감일까지시간계산 = (마감일?: Date): string => {
  if (!마감일) return '마감일 없음';
  
  const 지금 = new Date();
  const 차이 = 마감일.getTime() - 지금.getTime();
  
  if (차이 < 0) return '⚠️ 마감일 지남';
  
  const 일수 = Math.floor(차이 / (1000 * 60 * 60 * 24));
  const 시간수 = Math.floor((차이 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  if (일수 > 0) return `⏰ ${일수}일 ${시간수}시간 남음`;
  if (시간수 > 0) return `⏰ ${시간수}시간 남음`;
  
  const 분수 = Math.floor((차이 % (1000 * 60 * 60)) / (1000 * 60));
  return `⏰ ${분수}분 남음`;
};