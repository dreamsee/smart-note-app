/**
 * 감정 분석 유틸리티
 * 7차원 노트 시스템의 6차원(감정/톤)과 문고리 철학 통합
 */

import { 
  기본감정타입, 
  감정강도타입, 
  텍스트톤타입, 
  기분상태타입,
  감정차원타입 
} from '../타입';

// 감정 분석 결과 타입
export interface 감정분석결과 {
  주감정: 기본감정타입;
  부감정?: 기본감정타입[];
  감정강도: 감정강도타입;
  텍스트톤: 텍스트톤타입;
  에너지레벨: 1 | 2 | 3 | 4 | 5;
  신뢰도: number; // 0-1 척도
}

// 감정 키워드 사전
const 감정키워드사전: Record<기본감정타입, string[]> = {
  '기쁨': ['행복', '즐거움', '기쁨', '좋아', '최고', '감사', '사랑', '웃음', '신나', '흥분'],
  '슬픔': ['슬픔', '우울', '눈물', '아픔', '외로움', '그리움', '상실', '안타까움', '허전'],
  '분노': ['화가', '짜증', '분노', '답답', '억울', '불공평', '싫어', '미움', '열받아'],
  '두려움': ['무서움', '두려움', '불안', '걱정', '초조', '긴장', '염려', '공포', '떨림'],
  '놀람': ['놀라', '깜짝', '충격', '당황', '의외', '갑작', '예상못한', '놀랍', '신기'],
  '혐오': ['역겨움', '싫음', '불쾌', '거부감', '더러움', '구역질', '끔찍', '불편', '거북']
};

// 텍스트 톤 패턴
const 텍스트톤패턴: Record<텍스트톤타입, RegExp[]> = {
  '공식적': [/습니다$/, /입니다$/, /하십시오/, /바랍니다/],
  '비공식적': [/야$/, /거든/, /잖아/, /ㅋㅋ/, /ㅎㅎ/],
  '친근한': [/~/, /ㅎㅎ/, /^^/, /😊/, /💕/],
  '차가운': [/\.{3,}/, /그래/, /알았어/, /됐어/],
  '긍정적': [/좋아/, /최고/, /훌륭/, /멋진/, /대단/],
  '부정적': [/싫어/, /최악/, /별로/, /안좋/, /실망/],
  '중립적': [/입니다/, /있습니다/, /됩니다/, /하겠습니다/],
  '유머러스': [/ㅋㅋ/, /하하/, /농담/, /장난/, /웃긴/],
  '진지한': [/정말/, /진심/, /심각/, /중요/, /반드시/],
  '캐주얼한': [/뭐/, /그냥/, /막/, /대충/, /음/],
  '비판적': [/문제/, /잘못/, /오류/, /실수/, /비판/],
  '칭찬하는': [/잘했/, /훌륭/, /대단/, /멋진/, /최고/]
};

export class 감정분석기 {
  /**
   * 텍스트에서 감정을 분석합니다
   */
  async 텍스트분석하기(텍스트: string): Promise<감정분석결과> {
    // 1. 기본 감정 추출
    const 감정점수맵 = this.감정점수계산하기(텍스트);
    const 주감정 = this.주감정판단하기(감정점수맵);
    const 부감정 = this.부감정추출하기(감정점수맵, 주감정);
    
    // 2. 감정 강도 계산
    const 감정강도 = this.감정강도계산하기(텍스트, 주감정);
    
    // 3. 텍스트 톤 분류
    const 텍스트톤 = this.텍스트톤분류하기(텍스트);
    
    // 4. 에너지 레벨 추정
    const 에너지레벨 = this.에너지레벨추정하기(텍스트, 주감정);
    
    // 5. 신뢰도 계산
    const 신뢰도 = this.신뢰도계산하기(감정점수맵);
    
    return {
      주감정,
      부감정: 부감정.length > 0 ? 부감정 : undefined,
      감정강도,
      텍스트톤,
      에너지레벨,
      신뢰도
    };
  }
  
  /**
   * 각 감정별 점수를 계산합니다
   */
  private 감정점수계산하기(텍스트: string): Map<기본감정타입, number> {
    const 점수맵 = new Map<기본감정타입, number>();
    const 정규화된텍스트 = 텍스트.toLowerCase();
    
    // 각 감정별 키워드 매칭
    Object.entries(감정키워드사전).forEach(([감정, 키워드들]) => {
      let 점수 = 0;
      키워드들.forEach(키워드 => {
        const 매칭횟수 = (정규화된텍스트.match(new RegExp(키워드, 'gi')) || []).length;
        점수 += 매칭횟수;
      });
      점수맵.set(감정 as 기본감정타입, 점수);
    });
    
    return 점수맵;
  }
  
  /**
   * 가장 높은 점수의 감정을 주감정으로 판단합니다
   */
  private 주감정판단하기(점수맵: Map<기본감정타입, number>): 기본감정타입 {
    let 최고점수 = 0;
    let 주감정: 기본감정타입 = '기쁨'; // 기본값
    
    점수맵.forEach((점수, 감정) => {
      if (점수 > 최고점수) {
        최고점수 = 점수;
        주감정 = 감정;
      }
    });
    
    // 모든 점수가 0이면 중립적으로 판단
    if (최고점수 === 0) {
      return '기쁨'; // 중립일 때 기본 긍정
    }
    
    return 주감정;
  }
  
  /**
   * 부감정을 추출합니다 (주감정 제외, 점수 > 0)
   */
  private 부감정추출하기(
    점수맵: Map<기본감정타입, number>, 
    주감정: 기본감정타입
  ): 기본감정타입[] {
    const 부감정들: 기본감정타입[] = [];
    
    점수맵.forEach((점수, 감정) => {
      if (감정 !== 주감정 && 점수 > 0) {
        부감정들.push(감정);
      }
    });
    
    // 점수 순으로 정렬
    return 부감정들.sort((a, b) => 
      (점수맵.get(b) || 0) - (점수맵.get(a) || 0)
    ).slice(0, 2); // 최대 2개까지
  }
  
  /**
   * 감정 강도를 계산합니다 (1-10)
   */
  private 감정강도계산하기(텍스트: string, 주감정: 기본감정타입): 감정강도타입 {
    // 느낌표, 물음표, 이모지 등으로 강도 측정
    const 강조부호 = (텍스트.match(/[!?]{1,}/g) || []).length;
    const 이모지 = (텍스트.match(/[\u{1F600}-\u{1F64F}]/gu) || []).length;
    const 대문자비율 = (텍스트.match(/[A-Z가-힣]/g) || []).length / 텍스트.length;
    
    // 기본 강도 5에서 시작
    let 강도 = 5;
    
    // 강조 요소에 따라 증가
    강도 += Math.min(강조부호, 3);
    강도 += Math.min(이모지, 2);
    강도 += Math.floor(대문자비율 * 3);
    
    // 1-10 범위로 제한
    return Math.max(1, Math.min(10, 강도)) as 감정강도타입;
  }
  
  /**
   * 텍스트 톤을 분류합니다
   */
  private 텍스트톤분류하기(텍스트: string): 텍스트톤타입 {
    let 최고점수 = 0;
    let 판단된톤: 텍스트톤타입 = '중립적';
    
    Object.entries(텍스트톤패턴).forEach(([톤, 패턴들]) => {
      let 점수 = 0;
      패턴들.forEach(패턴 => {
        if (패턴.test(텍스트)) {
          점수++;
        }
      });
      
      if (점수 > 최고점수) {
        최고점수 = 점수;
        판단된톤 = 톤 as 텍스트톤타입;
      }
    });
    
    return 판단된톤;
  }
  
  /**
   * 에너지 레벨을 추정합니다 (1-5)
   */
  private 에너지레벨추정하기(
    텍스트: string, 
    주감정: 기본감정타입
  ): 1 | 2 | 3 | 4 | 5 {
    // 텍스트 길이와 감정에 따른 에너지 추정
    const 텍스트길이 = 텍스트.length;
    const 문장수 = (텍스트.match(/[.!?]+/g) || []).length || 1;
    const 평균문장길이 = 텍스트길이 / 문장수;
    
    // 감정별 기본 에너지
    const 감정에너지맵: Record<기본감정타입, number> = {
      '기쁨': 4,
      '슬픔': 2,
      '분노': 5,
      '두려움': 3,
      '놀람': 4,
      '혐오': 3
    };
    
    let 에너지 = 감정에너지맵[주감정];
    
    // 문장 길이에 따른 조정
    if (평균문장길이 > 50) 에너지++;
    if (평균문장길이 < 20) 에너지--;
    
    return Math.max(1, Math.min(5, 에너지)) as 1 | 2 | 3 | 4 | 5;
  }
  
  /**
   * 분석 결과의 신뢰도를 계산합니다
   */
  private 신뢰도계산하기(점수맵: Map<기본감정타입, number>): number {
    const 전체점수 = Array.from(점수맵.values()).reduce((a, b) => a + b, 0);
    
    if (전체점수 === 0) return 0.3; // 감정 키워드 없음
    
    // 가장 높은 점수와 두 번째 점수의 차이로 신뢰도 판단
    const 점수배열 = Array.from(점수맵.values()).sort((a, b) => b - a);
    const 최고점수 = 점수배열[0] || 0;
    const 두번째점수 = 점수배열[1] || 0;
    
    const 점수차이비율 = (최고점수 - 두번째점수) / 전체점수;
    
    // 0.3 ~ 0.9 범위로 정규화
    return Math.min(0.9, Math.max(0.3, 0.3 + 점수차이비율 * 0.6));
  }
  
  /**
   * 감정차원타입으로 변환합니다
   */
  감정차원생성하기(분석결과: 감정분석결과): 감정차원타입 {
    return {
      기분상태: {
        주감정: 분석결과.주감정,
        부감정: 분석결과.부감정,
        전체강도: 분석결과.감정강도,
        에너지레벨: 분석결과.에너지레벨
      },
      텍스트톤: 분석결과.텍스트톤,
      감정노트: `신뢰도: ${(분석결과.신뢰도 * 100).toFixed(0)}%`
    };
  }
}