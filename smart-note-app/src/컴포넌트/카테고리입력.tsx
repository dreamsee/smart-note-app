import React, { useState, useEffect } from 'react';
import { 폴더설정타입 } from '../타입';
import { 조합이름가져오기, 카테고리조합저장, 저장된조합이름확인 } from '../유틸/카테고리색상';
import { 추천카테고리예측하기, 카테고리사용학습하기 } from '../유틸/카테고리자동선택';
import 동적카테고리입력 from './동적카테고리입력';
import 동적카테고리팝업 from './동적카테고리팝업';

interface 카테고리입력속성 {
  카테고리목록: string[];
  현재입력값: string;
  현재입력값설정: (값: string) => void;
  메시지전송하기: (텍스트: string, 옵션?: { category?: string }) => void;
  엔터키처리: (이벤트: React.KeyboardEvent) => void;
  폴더설정: 폴더설정타입;
  폴더설정업데이트하기: (폴더아이디: string, 새설정: Partial<폴더설정타입>) => Promise<void>;
  폴더아이디: string;
}

// 카테고리형 입력 컴포넌트
const 카테고리입력: React.FC<카테고리입력속성> = ({
  카테고리목록,
  현재입력값,
  현재입력값설정,
  메시지전송하기,
  엔터키처리,
  폴더설정,
  폴더설정업데이트하기,
  폴더아이디
}) => {
  const [선택된카테고리목록, 선택된카테고리목록설정] = useState<string[]>([]);
  const [동적카테고리상태, 동적카테고리상태설정] = useState<{ [key: string]: string[] }>({});
  const [동적팝업열림, 동적팝업열림설정] = useState(false);
  const [팝업대상카테고리목록, 팝업대상카테고리목록설정] = useState<string[]>([]);
  const [예측카테고리, 예측카테고리설정] = useState<{ 카테고리: string; 신뢰도: number } | null>(null);
  const [이전선택카테고리, 이전선택카테고리설정] = useState<string | null>(null);

  // 컴포넌트 마운트 시 예측 카테고리 설정
  useEffect(() => {
    const 자동선택설정 = 폴더설정.카테고리자동선택설정;
    if (자동선택설정?.활성화 && 카테고리목록.length > 0) {
      const 예측결과 = 추천카테고리예측하기(자동선택설정, 카테고리목록);
      
      if (예측결과 && 예측결과.신뢰도 > 0.3) { // 30% 이상 신뢰도일 때만
        예측카테고리설정(예측결과);
        
        // 신뢰도가 높고(70% 이상) 선택된 카테고리가 없으면 자동 선택
        if (예측결과.신뢰도 > 0.7 && 선택된카테고리목록.length === 0) {
          선택된카테고리목록설정([예측결과.카테고리]);
        }
      } else {
        예측카테고리설정(null);
      }
    }
  }, [카테고리목록, 폴더설정.카테고리자동선택설정, 선택된카테고리목록.length]);

  // 마지막 사용 카테고리 추적
  useEffect(() => {
    const 자동선택설정 = 폴더설정.카테고리자동선택설정;
    if (자동선택설정?.마지막사용카테고리) {
      이전선택카테고리설정(자동선택설정.마지막사용카테고리);
    }
  }, [폴더설정.카테고리자동선택설정]);

  const 카테고리토글 = async (카테고리: string) => {
    선택된카테고리목록설정(이전목록 => {
      const 새목록 = 이전목록.includes(카테고리) 
        ? 이전목록.filter(항목 => 항목 !== 카테고리)
        : [...이전목록, 카테고리];
      
      // 카테고리가 추가될 때만 학습 (제거할 때는 학습하지 않음)
      if (!이전목록.includes(카테고리)) {
        카테고리선택학습처리(카테고리);
      }
      
      return 새목록;
    });
  };

  // 카테고리 선택 학습 처리
  const 카테고리선택학습처리 = async (선택된카테고리: string) => {
    const 자동선택설정 = 폴더설정.카테고리자동선택설정;
    if (!자동선택설정?.활성화) return;

    try {
      const 업데이트된설정 = 카테고리사용학습하기(
        자동선택설정,
        선택된카테고리,
        이전선택카테고리 || undefined
      );

      await 폴더설정업데이트하기(폴더아이디, {
        카테고리자동선택설정: 업데이트된설정
      });

      // 이전 선택 카테고리 업데이트
      이전선택카테고리설정(선택된카테고리);
    } catch (오류) {
      console.error('카테고리 학습 실패:', 오류);
    }
  };

  const 동적카테고리상태업데이트 = (카테고리: string, 줄목록: string[]) => {
    동적카테고리상태설정(이전상태 => ({
      ...이전상태,
      [카테고리]: 줄목록
    }));
  };

  const 메시지전송처리 = async () => {
    if (현재입력값.trim() === '') return;

    // 동적 카테고리 사용 여부 확인
    const 동적카테고리사용 = 폴더설정.동적카테고리사용 ?? false;

    if (선택된카테고리목록.length > 1 && 동적카테고리사용) {
      // 이미 저장된 조합이 있는지 확인
      const 저장된이름 = 저장된조합이름확인(선택된카테고리목록, 폴더설정.카테고리조합설정);
      
      if (!저장된이름) {
        // 저장된 조합이 없을 때만 팝업 열기
        팝업대상카테고리목록설정(선택된카테고리목록);
        동적팝업열림설정(true);
        return; // 팝업에서 처리 후 실제 전송
      }
      // 저장된 조합이 있으면 바로 전송 진행
    }

    // 기본 방식 또는 단일 카테고리 처리
    await 기본메시지전송처리();
  };

  const 기본메시지전송처리 = async () => {
    // 선택된 카테고리들을 조합해서 카테고리 문자열 생성
    let 카테고리문자열 = '';
    if (선택된카테고리목록.length === 1) {
      카테고리문자열 = 선택된카테고리목록[0];
    } else if (선택된카테고리목록.length > 1) {
      // 기본 방식: 쉼표로 구분
      카테고리문자열 = 선택된카테고리목록.join(',');
    }

    // 메시지 전송 시 카테고리 사용 학습
    if (선택된카테고리목록.length > 0) {
      await 최종카테고리사용학습(선택된카테고리목록);
    }

    메시지전송하기(현재입력값.trim(), { category: 카테고리문자열 });
    현재입력값설정('');
    선택된카테고리목록설정([]);
    
    // 동적 카테고리 상태 초기화
    동적카테고리상태설정({});
  };

  // 최종 카테고리 사용 학습 (메시지 전송 시)
  const 최종카테고리사용학습 = async (사용된카테고리목록: string[]) => {
    const 자동선택설정 = 폴더설정.카테고리자동선택설정;
    if (!자동선택설정?.활성화) return;

    try {
      let 업데이트된설정 = { ...자동선택설정 };

      // 사용된 각 카테고리에 대해 학습 (실제 사용 가중치 추가)
      for (const 카테고리 of 사용된카테고리목록) {
        업데이트된설정 = 카테고리사용학습하기(
          업데이트된설정,
          카테고리,
          이전선택카테고리 || undefined
        );
      }

      await 폴더설정업데이트하기(폴더아이디, {
        카테고리자동선택설정: 업데이트된설정
      });

      console.log('메시지 전송 시 카테고리 학습 완료:', 사용된카테고리목록);
    } catch (오류) {
      console.error('메시지 전송 시 카테고리 학습 실패:', 오류);
    }
  };

  // 동적 카테고리 팝업 확정 처리
  const 동적카테고리확정처리 = async (조합이름: string) => {
    // 조합 이름을 데이터베이스에 저장
    const 새조합설정 = 카테고리조합저장(팝업대상카테고리목록, 조합이름, 폴더설정.카테고리조합설정);
    await 폴더설정업데이트하기(폴더아이디, { 카테고리조합설정: 새조합설정 });

    // 메시지 전송 (조합 이름을 카테고리로 사용)
    메시지전송하기(현재입력값.trim(), { category: 팝업대상카테고리목록.join(',') });
    현재입력값설정('');
    선택된카테고리목록설정([]);
    
    // 팝업 닫기
    동적팝업열림설정(false);
    팝업대상카테고리목록설정([]);
  };

  // 동적 카테고리 팝업 닫기
  const 동적카테고리팝업닫기 = () => {
    동적팝업열림설정(false);
    팝업대상카테고리목록설정([]);
  };

  const 엔터키처리핸들러 = (이벤트: React.KeyboardEvent) => {
    if (이벤트.key === 'Enter' && !이벤트.shiftKey) {
      이벤트.preventDefault();
      메시지전송처리();
    }
  };

  return (
    <div className="카테고리입력-영역">
      {/* 카테고리 선택 영역 */}
      <div style={{ 
        display: 'flex', 
        flexWrap: 'wrap', 
        gap: '8px',
        padding: '12px',
        backgroundColor: '#f8f9fa',
        borderRadius: '4px',
        border: '1px solid #e9ecef'
      }}>
        <div style={{ 
          fontSize: '12px', 
          color: '#666', 
          marginRight: '8px',
          alignSelf: 'center',
          minWidth: 'fit-content'
        }}>
          카테고리:
        </div>
        
        {/* 기존 카테고리 버튼들 */}
        {카테고리목록.map((카테고리) => {
          const 선택됨 = 선택된카테고리목록.includes(카테고리);
          const 예측됨 = 예측카테고리?.카테고리 === 카테고리 && !선택됨;
          
          return (
            <button
              key={카테고리}
              onClick={() => 카테고리토글(카테고리)}
              style={{
                padding: '6px 12px',
                fontSize: '12px',
                border: 예측됨 ? '2px solid #28a745' : '1px solid #ddd',
                borderRadius: '16px',
                backgroundColor: 선택됨 ? '#007bff' : 예측됨 ? '#d4edda' : 'white',
                color: 선택됨 ? 'white' : 예측됨 ? '#155724' : '#333',
                cursor: 'pointer',
                transition: 'all 0.2s',
                opacity: 예측됨 ? 0.8 : 1,
                boxShadow: 예측됨 ? '0 0 4px rgba(40, 167, 69, 0.3)' : 'none'
              }}
              title={예측됨 ? `추천 (신뢰도: ${Math.round((예측카테고리?.신뢰도 || 0) * 100)}%)` : ''}
            >
              {예측됨 && '⭐ '}{카테고리}
            </button>
          );
        })}
        
        {/* 동적 카테고리 입력 필드 - 현재 숨김 처리 (사용자 요청) */}
        {false && (
          <동적카테고리입력
            카테고리줄목록={동적카테고리상태['새카테고리'] || ['']}
            카테고리줄목록설정={(줄목록) => 동적카테고리상태업데이트('새카테고리', 줄목록)}
            선택됨={선택된카테고리목록.includes((동적카테고리상태['새카테고리'] || []).join(''))}
            온클릭={() => {
              const 새카테고리 = (동적카테고리상태['새카테고리'] || []).join('');
              if (새카테고리) {
                카테고리토글(새카테고리);
              }
            }}
          />
        )}
      </div>

      {/* 예측 카테고리 정보 표시 */}
      {예측카테고리 && 선택된카테고리목록.length === 0 && (
        <div style={{ 
          fontSize: '11px', 
          color: '#28a745',
          padding: '4px 8px',
          backgroundColor: '#f8fff9',
          borderRadius: '4px',
          border: '1px solid #d1ecf1'
        }}>
          💡 추천: <strong>{예측카테고리.카테고리}</strong> (신뢰도 {Math.round(예측카테고리.신뢰도 * 100)}%) - 패턴 학습 기반
        </div>
      )}

      {/* 선택된 카테고리 표시 */}
      {선택된카테고리목록.length > 0 && (
        <div style={{ 
          fontSize: '12px', 
          color: '#007bff',
          padding: '4px 8px',
          backgroundColor: '#e7f3ff',
          borderRadius: '4px'
        }}>
          선택됨: {조합이름가져오기(선택된카테고리목록, 폴더설정.카테고리조합설정)}
        </div>
      )}

      {/* 텍스트 입력 및 전송 버튼 */}
      <div style={{ display: 'flex', gap: '8px' }}>
        <input
          type="text"
          className="채팅입력-필드"
          placeholder={
            선택된카테고리목록.length > 0 
              ? `${조합이름가져오기(선택된카테고리목록, 폴더설정.카테고리조합설정)}에 대해 입력하세요...`
              : "카테고리를 선택하고 메시지를 입력하세요..."
          }
          value={현재입력값}
          onChange={(e) => 현재입력값설정(e.target.value)}
          onKeyDown={엔터키처리핸들러}
        />
        <button 
          className="채팅전송-버튼"
          onClick={메시지전송처리}
          disabled={선택된카테고리목록.length === 0 && 현재입력값.trim() === ''}
        >
          전송
        </button>
      </div>

      {/* 동적 카테고리 팝업 */}
      <동적카테고리팝업
        팝업열림={동적팝업열림}
        선택된카테고리목록={팝업대상카테고리목록}
        기존조합이름={저장된조합이름확인(팝업대상카테고리목록, 폴더설정.카테고리조합설정)}
        팝업닫기={동적카테고리팝업닫기}
        조합이름확정={동적카테고리확정처리}
      />
    </div>
  );
};

export default 카테고리입력;