import { create } from 'zustand'
import { 아이템타입, 스킬타입, 조합레시피타입, 클래스타입 } from '../타입'

interface 게임데이터스토어타입 {
  // 아이템 관리
  아이템목록: 아이템타입[]
  아이템목록설정: (아이템목록: 아이템타입[]) => void
  아이템추가: (아이템: 아이템타입) => void
  아이템업데이트: (아이디: string, 아이템: Partial<아이템타입>) => void
  아이템삭제: (아이디: string) => void
  아이템찾기: (아이디: string) => 아이템타입 | undefined

  // 스킬 관리
  스킬목록: 스킬타입[]
  스킬목록설정: (스킬목록: 스킬타입[]) => void
  스킬추가: (스킬: 스킬타입) => void
  스킬업데이트: (아이디: string, 스킬: Partial<스킬타입>) => void
  스킬삭제: (아이디: string) => void
  스킬찾기: (아이디: string) => 스킬타입 | undefined

  // 조합 관리
  조합레시피목록: 조합레시피타입[]
  조합레시피추가: (레시피: 조합레시피타입) => void
  조합레시피삭제: (아이디: string) => void
  조합가능여부확인: (레시피아이디: string, 재료목록: Record<string, number>) => boolean
  조합실행: (레시피아이디: string, 재료목록: Record<string, number>) => { 성공: boolean; 결과아이템?: 아이템타입; 결과스킬?: 스킬타입; 메시지: string }

  // 클래스별 필터링
  클래스별아이템얻기: (클래스: 클래스타입) => 아이템타입[]
  클래스별스킬얻기: (클래스: 클래스타입) => 스킬타입[]
  재료아이템목록얻기: () => 아이템타입[]
  재료스킬목록얻기: () => 스킬타입[]

  // 캐릭터 연동 관리
  캐릭터장비맵: Record<string, string[]> // 캐릭터아이디 -> 아이템아이디[]
  캐릭터스킬맵: Record<string, string[]> // 캐릭터아이디 -> 스킬아이디[]
  
  캐릭터장비설정: (캐릭터아이디: string, 아이템아이디목록: string[]) => void
  캐릭터스킬설정: (캐릭터아이디: string, 스킬아이디목록: string[]) => void
  캐릭터장비얻기: (캐릭터아이디: string) => 아이템타입[]
  캐릭터스킬얻기: (캐릭터아이디: string) => 스킬타입[]
}

const useGameDataStore = create<게임데이터스토어타입>((set, get) => ({
  // 초기 아이템 목록
  아이템목록: [
    {
      아이디: '1',
      이름: '신성한 갑옷',
      종류: '방어구',
      등급: '영웅',
      능력치: {
        방어력: 30,
        체력: 200,
        특수효과: ['신성 보호', '마법 저항']
      },
      가격: 1500,
      설명: '신성한 힘이 깃든 갑옷으로 착용자를 보호한다.',
      사용가능클래스: ['전사', '기사'],
      재료여부: false
    },
    {
      아이디: '2',
      이름: '빛의 검',
      종류: '무기',
      등급: '영웅',
      능력치: {
        공격력: 45,
        특수효과: ['빛의 축복', '언데드 특효']
      },
      가격: 1200,
      설명: '성스러운 빛의 힘이 깃든 검으로 악을 베어낸다.',
      사용가능클래스: ['전사', '기사'],
      재료여부: false
    },
    {
      아이디: '3',
      이름: '수호자의 방패',
      종류: '방어구',
      등급: '영웅',
      능력치: {
        방어력: 25,
        특수효과: ['방어 태세', '카운터 어택']
      },
      가격: 800,
      설명: '전설적인 수호자가 사용했던 방패로 강력한 방어력을 제공한다.',
      사용가능클래스: ['전사', '기사'],
      재료여부: false
    },
    {
      아이디: '4',
      이름: '마나 로브',
      종류: '방어구',
      등급: '영웅',
      능력치: {
        방어력: 15,
        특수효과: ['마나 회복', '주문 증폭']
      },
      가격: 1000,
      설명: '마법사들이 애용하는 로브로 마법 사용을 도와준다.',
      사용가능클래스: ['마법사'],
      재료여부: false
    },
    {
      아이디: '5',
      이름: '현자의 지팡이',
      종류: '무기',
      등급: '영웅',
      능력치: {
        공격력: 60,
        특수효과: ['지혜의 힘', '마나 효율']
      },
      가격: 1400,
      설명: '현자의 지혜가 깃든 지팡이로 강력한 마법을 사용할 수 있다.',
      사용가능클래스: ['마법사'],
      재료여부: false
    },
    {
      아이디: '6',
      이름: '마법 증폭기',
      종류: '기타',
      등급: '희귀',
      능력치: {
        특수효과: ['마법 증폭', '원소 친화']
      },
      가격: 500,
      설명: '마법의 위력을 증폭시켜주는 신비한 장치.',
      사용가능클래스: ['마법사'],
      재료여부: false
    },
    // 재료 아이템들
    {
      아이디: '101',
      이름: '철 주괴',
      종류: '재료',
      등급: '일반',
      능력치: {},
      가격: 50,
      설명: '무기와 방어구 제작에 사용되는 기본 금속.',
      사용가능클래스: ['전체'],
      재료여부: true
    },
    {
      아이디: '102',
      이름: '마법석',
      종류: '재료',
      등급: '희귀',
      능력치: {},
      가격: 200,
      설명: '마법 장비 제작에 필요한 신비한 돌.',
      사용가능클래스: ['전체'],
      재료여부: true
    },
    {
      아이디: '103',
      이름: '엘프 실',
      종류: '재료',
      등급: '희귀',
      능력치: {},
      가격: 150,
      설명: '가볍고 튼튼한 엘프족의 실.',
      사용가능클래스: ['전체'],
      재료여부: true
    },
    // 조합 결과 아이템들
    {
      아이디: '201',
      이름: '마법검',
      종류: '무기',
      등급: '전설',
      능력치: {
        공격력: 70,
        특수효과: ['마법 속성', '원소 피해']
      },
      가격: 2000,
      설명: '철과 마법석을 조합하여 만든 강력한 마법검.',
      사용가능클래스: ['전사', '기사'],
      재료여부: false,
      조합으로생성됨: true,
      조합레시피아이디: 'recipe1'
    }
  ],

  // 초기 스킬 목록
  스킬목록: [
    {
      아이디: '1',
      이름: '신성한 수호자',
      종류: '공격',
      데미지: 160,
      쿨다운: 3,
      마나소비: 50,
      사거리: 2,
      효과범위: '단일',
      설명: '팔라딘이 공격을 날리며 160/240/360% 마법 피해를 입히고 1라운드 동안 적을 기절시킵니다. 그 후 자신 및 가장 약한 아군을 최대 체력의 4%를 회복시킵니다.',
      사용가능클래스: ['기사'],
      재료여부: false
    },
    {
      아이디: '2',
      이름: '메테오 스톰',
      종류: '공격',
      데미지: 200,
      쿨다운: 5,
      마나소비: 80,
      사거리: 4,
      효과범위: '광역',
      설명: '하늘에서 거대한 운석을 소환하여 광역 피해를 입힙니다. 200/300/400% 마법 피해를 입히며 화상 상태를 부여합니다.',
      사용가능클래스: ['마법사'],
      재료여부: false
    },
    {
      아이디: '3',
      이름: '분노',
      종류: '버프',
      데미지: 0,
      쿨다운: 4,
      마나소비: 30,
      사거리: 0,
      효과범위: '단일',
      설명: '전사의 분노가 폭발하여 공격력이 50% 증가하고 치명타율이 25% 증가합니다. 3턴 지속.',
      사용가능클래스: ['전사'],
      재료여부: false
    },
    {
      아이디: '4',
      이름: '방어태세',
      종류: '방어',
      데미지: 0,
      쿨다운: 3,
      마나소비: 20,
      사거리: 0,
      효과범위: '단일',
      설명: '방어적인 자세를 취하여 받는 피해를 30% 감소시키고 반격 확률을 20% 증가시킵니다. 2턴 지속.',
      사용가능클래스: ['전사', '기사'],
      재료여부: false
    },
    {
      아이디: '5',
      이름: '화염구',
      종류: '공격',
      데미지: 120,
      쿨다운: 2,
      마나소비: 25,
      사거리: 3,
      효과범위: '단일',
      설명: '화염의 구체를 발사하여 적에게 화염 피해를 입히고 화상 상태를 부여합니다.',
      사용가능클래스: ['마법사'],
      재료여부: false
    },
    {
      아이디: '6',
      이름: '치유의 빛',
      종류: '치유',
      데미지: 0,
      쿨다운: 2,
      마나소비: 35,
      사거리: 2,
      효과범위: '단일',
      설명: '신성한 빛으로 아군의 체력을 150포인트 회복시키고 독과 화상을 치료합니다.',
      사용가능클래스: ['기사'],
      재료여부: false
    },
    // 재료 스킬들
    {
      아이디: '201',
      이름: '화염 조각',
      종류: '재료',
      데미지: 0,
      쿨다운: 0,
      마나소비: 0,
      사거리: 0,
      효과범위: '단일',
      설명: '화염 마법 조합에 사용되는 마법 조각.',
      사용가능클래스: ['전체'],
      재료여부: true
    },
    {
      아이디: '202',
      이름: '신성 조각',
      종류: '재료',
      데미지: 0,
      쿨다운: 0,
      마나소비: 0,
      사거리: 0,
      효과범위: '단일',
      설명: '신성 마법 조합에 사용되는 마법 조각.',
      사용가능클래스: ['전체'],
      재료여부: true
    },
    // 조합 결과 스킬들
    {
      아이디: '203',
      이름: '고급 화염구',
      종류: '공격',
      데미지: 180,
      쿨다운: 3,
      마나소비: 40,
      사거리: 4,
      효과범위: '단일',
      설명: '화염 조각을 조합하여 만든 강화된 화염구 스킬.',
      사용가능클래스: ['마법사'],
      재료여부: false,
      조합으로생성됨: true,
      조합레시피아이디: 'recipe2'
    }
  ],

  // 조합 레시피 목록
  조합레시피목록: [
    {
      아이디: 'recipe1',
      이름: '마법검 제작',
      결과아이템아이디: '201',
      필요재료: [
        { 아이디: '101', 수량: 2 }, // 철 주괴
        { 아이디: '102', 수량: 1 }  // 마법석
      ],
      조합비용: 500,
      필요클래스: ['전사', '기사'],
      설명: '철 주괴와 마법석을 조합하여 마법검을 제작합니다.'
    },
    {
      아이디: 'recipe2',
      이름: '고급 화염구 습득',
      결과스킬아이디: '203',
      필요재료: [
        { 아이디: '201', 수량: 3 }, // 화염 조각
        { 아이디: '102', 수량: 1 }  // 마법석
      ],
      조합비용: 300,
      필요클래스: ['마법사'],
      설명: '화염 조각과 마법석을 조합하여 고급 화염구 스킬을 습득합니다.'
    }
  ],

  // 초기 캐릭터-아이템-스킬 매핑
  캐릭터장비맵: {
    '1': ['1', '2', '3'], // 강철의 전사 -> 신성한 갑옷, 빛의 검, 수호자의 방패
    '2': ['4', '5', '6']  // 화염 마법사 -> 마나 로브, 현자의 지팡이, 마법 증폭기
  },

  캐릭터스킬맵: {
    '1': ['1', '3', '4'], // 강철의 전사 -> 신성한 수호자, 분노, 방어태세
    '2': ['2', '5', '6']  // 화염 마법사 -> 메테오 스톰, 화염구, 치유의 빛
  },

  // 아이템 관리 함수들
  아이템목록설정: (아이템목록) => set({ 아이템목록 }),
  
  아이템추가: (아이템) => set((state) => ({
    아이템목록: [...state.아이템목록, 아이템]
  })),
  
  아이템업데이트: (아이디, 업데이트데이터) => set((state) => ({
    아이템목록: state.아이템목록.map(아이템 => 
      아이템.아이디 === 아이디 ? { ...아이템, ...업데이트데이터 } : 아이템
    )
  })),
  
  아이템삭제: (아이디) => set((state) => ({
    아이템목록: state.아이템목록.filter(아이템 => 아이템.아이디 !== 아이디)
  })),
  
  아이템찾기: (아이디) => {
    const state = get()
    return state.아이템목록.find(아이템 => 아이템.아이디 === 아이디)
  },

  // 스킬 관리 함수들
  스킬목록설정: (스킬목록) => set({ 스킬목록 }),
  
  스킬추가: (스킬) => set((state) => ({
    스킬목록: [...state.스킬목록, 스킬]
  })),
  
  스킬업데이트: (아이디, 업데이트데이터) => set((state) => ({
    스킬목록: state.스킬목록.map(스킬 => 
      스킬.아이디 === 아이디 ? { ...스킬, ...업데이트데이터 } : 스킬
    )
  })),
  
  스킬삭제: (아이디) => set((state) => ({
    스킬목록: state.스킬목록.filter(스킬 => 스킬.아이디 !== 아이디)
  })),
  
  스킬찾기: (아이디) => {
    const state = get()
    return state.스킬목록.find(스킬 => 스킬.아이디 === 아이디)
  },

  // 조합 관리 함수들
  조합레시피추가: (레시피) => set((state) => ({
    조합레시피목록: [...state.조합레시피목록, 레시피]
  })),

  조합레시피삭제: (아이디) => set((state) => ({
    조합레시피목록: state.조합레시피목록.filter(레시피 => 레시피.아이디 !== 아이디)
  })),

  조합가능여부확인: (레시피아이디, 재료목록) => {
    const state = get()
    const 레시피 = state.조합레시피목록.find(r => r.아이디 === 레시피아이디)
    if (!레시피) return false

    // 필요한 재료가 모두 충분한지 확인
    return 레시피.필요재료.every(필요재료 => {
      const 보유수량 = 재료목록[필요재료.아이디] || 0
      return 보유수량 >= 필요재료.수량
    })
  },

  조합실행: (레시피아이디, 재료목록) => {
    const state = get()
    const 레시피 = state.조합레시피목록.find(r => r.아이디 === 레시피아이디)
    
    if (!레시피) {
      return { 성공: false, 메시지: '레시피를 찾을 수 없습니다.' }
    }

    // 재료 확인
    const 조합가능 = 레시피.필요재료.every(필요재료 => {
      const 보유수량 = 재료목록[필요재료.아이디] || 0
      return 보유수량 >= 필요재료.수량
    })

    if (!조합가능) {
      return { 성공: false, 메시지: '재료가 부족합니다.' }
    }

    // 결과 아이템 또는 스킬 생성
    if (레시피.결과아이템아이디) {
      const 결과아이템 = state.아이템찾기(레시피.결과아이템아이디)
      if (결과아이템) {
        return { 성공: true, 결과아이템, 메시지: `${결과아이템.이름}이(가) 조합되었습니다!` }
      }
    }

    if (레시피.결과스킬아이디) {
      const 결과스킬 = state.스킬찾기(레시피.결과스킬아이디)
      if (결과스킬) {
        return { 성공: true, 결과스킬, 메시지: `${결과스킬.이름}을(를) 습득했습니다!` }
      }
    }

    return { 성공: false, 메시지: '조합에 실패했습니다.' }
  },

  // 클래스별 필터링 함수들
  클래스별아이템얻기: (클래스) => {
    const state = get()
    return state.아이템목록.filter(아이템 => 
      아이템.사용가능클래스.includes(클래스) || 아이템.사용가능클래스.includes('전체')
    )
  },

  클래스별스킬얻기: (클래스) => {
    const state = get()
    return state.스킬목록.filter(스킬 => 
      스킬.사용가능클래스.includes(클래스) || 스킬.사용가능클래스.includes('전체')
    )
  },

  재료아이템목록얻기: () => {
    const state = get()
    return state.아이템목록.filter(아이템 => 아이템.재료여부)
  },

  재료스킬목록얻기: () => {
    const state = get()
    return state.스킬목록.filter(스킬 => 스킬.재료여부)
  },

  // 캐릭터 연동 함수들
  캐릭터장비설정: (캐릭터아이디, 아이템아이디목록) => set((state) => ({
    캐릭터장비맵: {
      ...state.캐릭터장비맵,
      [캐릭터아이디]: 아이템아이디목록
    }
  })),
  
  캐릭터스킬설정: (캐릭터아이디, 스킬아이디목록) => set((state) => ({
    캐릭터스킬맵: {
      ...state.캐릭터스킬맵,
      [캐릭터아이디]: 스킬아이디목록
    }
  })),
  
  캐릭터장비얻기: (캐릭터아이디) => {
    const state = get()
    const 아이템아이디목록 = state.캐릭터장비맵[캐릭터아이디] || []
    return 아이템아이디목록.map(아이디 => state.아이템찾기(아이디)).filter(Boolean) as 아이템타입[]
  },
  
  캐릭터스킬얻기: (캐릭터아이디) => {
    const state = get()
    const 스킬아이디목록 = state.캐릭터스킬맵[캐릭터아이디] || []
    return 스킬아이디목록.map(아이디 => state.스킬찾기(아이디)).filter(Boolean) as 스킬타입[]
  }
}))

export default useGameDataStore