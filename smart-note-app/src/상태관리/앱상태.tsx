import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { 폴더타입, 노트타입, 채팅메시지타입, 앱상태타입, 폴더설정타입 } from '../타입';

// Context 타입 정의
interface 앱상태컨텍스트타입 {
  // 상태
  폴더목록: 폴더타입[];
  활성폴더: 폴더타입 | null;
  활성노트: 노트타입 | null;
  
  // 폴더 관련 함수들
  폴더선택하기: (폴더아이디: string) => void;
  새폴더생성하기: (폴더이름: string) => void;
  폴더삭제하기: (폴더아이디: string) => void;
  폴더이름변경하기: (폴더아이디: string, 새이름: string) => void;
  폴더설정업데이트하기: (폴더아이디: string, 새설정: Partial<폴더설정타입>) => void;
  
  // 노트 관련 함수들
  노트선택하기: (노트아이디: string) => void;
  새노트생성하기: (폴더아이디: string, 노트제목: string) => string;
  노트삭제하기: (폴더아이디: string, 노트아이디: string) => void;
  노트업데이트하기: (노트아이디: string, 업데이트내용: Partial<노트타입>) => void;
  
  // 채팅 메시지 관련 함수들
  새메시지추가하기: (노트아이디: string, 메시지텍스트: string, 옵션?: { category?: string; author?: string; 부모메시지아이디?: string }) => void;
  
  // 데이터 관리 함수들
  데이터초기화하기: () => void;
  데이터내보내기: () => string;
  데이터가져오기: (데이터문자열: string) => boolean;
}

// 초기 더미 데이터
const 초기데이터: 폴더타입[] = [
  {
    아이디: 'folder-1',
    이름: '음식일지',
    노트목록: [
      {
        아이디: 'note-1-1',
        제목: '2025-07-15',
        내용: '오늘 먹은 것들을 기록해보자.\n\n아침: 제육볶음과 쌀밥을 먹었다. 맛있었지만 조금 짰다.\n점심: 떡볶이를 먹었다. 달콤하고 매콤했다.',
        요약: '제육볶음, 떡볶이',
        채팅메시지목록: [
          {
            아이디: 'msg-1',
            텍스트: '제육볶음, 쌀밥',
            타임스탬프: new Date('2025-07-15T08:30:00'),
            카테고리: '아침',
            하위메시지목록: []
          },
          {
            아이디: 'msg-2', 
            텍스트: '떡볶이',
            타임스탬프: new Date('2025-07-15T11:15:00'),
            카테고리: '점심',
            하위메시지목록: []
          }
        ],
        생성시간: new Date('2025-07-15T08:00:00'),
        수정시간: new Date('2025-07-15T11:15:00'),
      }
    ],
    폴더설정: {
      시간표시여부: true,
      입력방식: '카테고리형',
      카테고리목록: ['아침', '점심', '저녁', '간식', '음료'],
      하위입력활성화: false,
    }
  },
  {
    아이디: 'folder-2',
    이름: '소설 대화',
    노트목록: [],
    폴더설정: {
      시간표시여부: false,
      입력방식: '대화형',
      캐릭터목록: [
        { 아이디: 'char-1', 이름: '주인공', 기본위치: '왼쪽' },
        { 아이디: 'char-2', 이름: '조연', 기본위치: '오른쪽' }
      ],
      하위입력활성화: true,
    }
  },
  {
    아이디: 'folder-3',
    이름: '일반 노트',
    노트목록: [],
    폴더설정: {
      시간표시여부: true,
      입력방식: '단순채팅',
      하위입력활성화: false,
    }
  }
];

// localStorage 키
const 저장소키 = {
  폴더목록: 'smart-note-폴더목록',
  활성폴더아이디: 'smart-note-활성폴더아이디',
  활성노트아이디: 'smart-note-활성노트아이디'
};

// localStorage에서 데이터 불러오기
const 저장된데이터불러오기 = (): 폴더타입[] => {
  try {
    const 저장된문자열 = localStorage.getItem(저장소키.폴더목록);
    if (저장된문자열) {
      const 파싱된데이터 = JSON.parse(저장된문자열);
      // Date 객체 복원
      return 파싱된데이터.map((폴더: any) => ({
        ...폴더,
        노트목록: 폴더.노트목록.map((노트: any) => ({
          ...노트,
          생성시간: new Date(노트.생성시간),
          수정시간: new Date(노트.수정시간),
          채팅메시지목록: 노트.채팅메시지목록.map((메시지: any) => {
            const 복원된메시지 = {
              ...메시지,
              타임스탬프: new Date(메시지.타임스탬프),
              하위메시지목록: 메시지.하위메시지목록 ? 메시지.하위메시지목록.map((하위메시지: any) => ({
                ...하위메시지,
                타임스탬프: new Date(하위메시지.타임스탬프)
              })) : []
            };
            return 복원된메시지;
          })
        }))
      }));
    }
  } catch (오류) {
    console.error('저장된 데이터 불러오기 실패:', 오류);
  }
  return 초기데이터;
};

// localStorage에 데이터 저장하기
const 데이터저장하기 = (폴더목록: 폴더타입[]) => {
  try {
    localStorage.setItem(저장소키.폴더목록, JSON.stringify(폴더목록));
    console.log('데이터가 저장되었습니다');
  } catch (오류) {
    console.error('데이터 저장 실패:', 오류);
  }
};

// 활성 상태 저장/불러오기
const 활성상태저장하기 = (활성폴더아이디: string | null, 활성노트아이디: string | null) => {
  try {
    if (활성폴더아이디) {
      localStorage.setItem(저장소키.활성폴더아이디, 활성폴더아이디);
    }
    if (활성노트아이디) {
      localStorage.setItem(저장소키.활성노트아이디, 활성노트아이디);
    }
  } catch (오류) {
    console.error('활성 상태 저장 실패:', 오류);
  }
};

const 활성상태불러오기 = () => {
  try {
    return {
      활성폴더아이디: localStorage.getItem(저장소키.활성폴더아이디),
      활성노트아이디: localStorage.getItem(저장소키.활성노트아이디)
    };
  } catch (오류) {
    console.error('활성 상태 불러오기 실패:', 오류);
    return { 활성폴더아이디: null, 활성노트아이디: null };
  }
};

// Context 생성
const 앱상태컨텍스트 = createContext<앱상태컨텍스트타입 | undefined>(undefined);

// Provider 컴포넌트
interface 앱상태제공자속성 {
  children: ReactNode;
}

export const 앱상태제공자: React.FC<앱상태제공자속성> = ({ children }) => {
  // localStorage에서 데이터 불러와서 초기화
  const [폴더목록, 폴더목록설정] = useState<폴더타입[]>(() => 저장된데이터불러오기());
  const [활성폴더, 활성폴더설정] = useState<폴더타입 | null>(null);
  const [활성노트, 활성노트설정] = useState<노트타입 | null>(null);

  // 컴포넌트 마운트 시 활성 상태 복원
  useEffect(() => {
    const 초기폴더목록 = 저장된데이터불러오기();
    const { 활성폴더아이디, 활성노트아이디 } = 활성상태불러오기();
    
    // 활성 폴더 복원
    if (활성폴더아이디) {
      const 복원폴더 = 초기폴더목록.find(폴더 => 폴더.아이디 === 활성폴더아이디);
      if (복원폴더) {
        활성폴더설정(복원폴더);
        
        // 활성 노트 복원
        if (활성노트아이디) {
          const 복원노트 = 복원폴더.노트목록.find(노트 => 노트.아이디 === 활성노트아이디);
          활성노트설정(복원노트 || 복원폴더.노트목록[0] || null);
        } else {
          활성노트설정(복원폴더.노트목록[0] || null);
        }
      }
    } else if (초기폴더목록.length > 0) {
      // 저장된 활성 폴더가 없으면 첫 번째 폴더 선택
      활성폴더설정(초기폴더목록[0]);
      활성노트설정(초기폴더목록[0].노트목록[0] || null);
    }
  }, []);

  // 폴더목록이 변경될 때마다 localStorage에 저장
  useEffect(() => {
    if (폴더목록.length > 0) {
      데이터저장하기(폴더목록);
    }
  }, [폴더목록]);

  // 활성 폴더/노트가 변경될 때마다 localStorage에 저장
  useEffect(() => {
    활성상태저장하기(활성폴더?.아이디 || null, 활성노트?.아이디 || null);
  }, [활성폴더, 활성노트]);

  // 폴더 선택
  const 폴더선택하기 = (폴더아이디: string) => {
    const 선택된폴더 = 폴더목록.find(폴더 => 폴더.아이디 === 폴더아이디);
    if (선택된폴더) {
      활성폴더설정(선택된폴더);
      // 첫 번째 노트를 활성 노트로 설정, 없으면 null
      활성노트설정(선택된폴더.노트목록[0] || null);
      console.log('폴더 선택됨:', 선택된폴더.이름);
    }
  };

  // 새 폴더 생성
  const 새폴더생성하기 = (폴더이름: string) => {
    const 새폴더: 폴더타입 = {
      아이디: `folder-${Date.now()}`,
      이름: 폴더이름,
      노트목록: [],
      폴더설정: {
        시간표시여부: true,
        입력방식: '단순채팅',
        하위입력활성화: false,
      }
    };
    
    폴더목록설정(이전목록 => [...이전목록, 새폴더]);
    활성폴더설정(새폴더);
    활성노트설정(null);
    console.log('새 폴더 생성됨:', 폴더이름);
  };

  // 폴더 삭제
  const 폴더삭제하기 = (폴더아이디: string) => {
    폴더목록설정(이전목록 => 이전목록.filter(폴더 => 폴더.아이디 !== 폴더아이디));
    
    // 활성 폴더가 삭제된 폴더라면 첫 번째 폴더로 변경
    if (활성폴더?.아이디 === 폴더아이디) {
      const 남은폴더목록 = 폴더목록.filter(폴더 => 폴더.아이디 !== 폴더아이디);
      활성폴더설정(남은폴더목록[0] || null);
      활성노트설정(남은폴더목록[0]?.노트목록[0] || null);
    }
    console.log('폴더 삭제됨:', 폴더아이디);
  };

  // 폴더 이름 변경
  const 폴더이름변경하기 = (폴더아이디: string, 새이름: string) => {
    폴더목록설정(이전목록 => 
      이전목록.map(폴더 => 
        폴더.아이디 === 폴더아이디 ? { ...폴더, 이름: 새이름 } : 폴더
      )
    );
    
    // 활성 폴더 이름도 업데이트
    if (활성폴더?.아이디 === 폴더아이디) {
      활성폴더설정(이전폴더 => 이전폴더 ? { ...이전폴더, 이름: 새이름 } : null);
    }
    console.log('폴더 이름 변경됨:', 새이름);
  };

  // 폴더 설정 업데이트
  const 폴더설정업데이트하기 = (폴더아이디: string, 새설정: Partial<폴더설정타입>) => {
    폴더목록설정(이전목록 => 
      이전목록.map(폴더 => 
        폴더.아이디 === 폴더아이디 
          ? { ...폴더, 폴더설정: { ...폴더.폴더설정, ...새설정 } }
          : 폴더
      )
    );
    
    // 활성 폴더 설정도 업데이트
    if (활성폴더?.아이디 === 폴더아이디) {
      활성폴더설정(이전폴더 => 
        이전폴더 
          ? { ...이전폴더, 폴더설정: { ...이전폴더.폴더설정, ...새설정 } }
          : null
      );
    }
    console.log('폴더 설정 업데이트됨:', 폴더아이디, 새설정);
  };

  // 노트 선택
  const 노트선택하기 = (노트아이디: string) => {
    if (!활성폴더) return;
    
    const 선택된노트 = 활성폴더.노트목록.find(노트 => 노트.아이디 === 노트아이디);
    if (선택된노트) {
      활성노트설정(선택된노트);
      console.log('노트 선택됨:', 선택된노트.제목);
    }
  };

  // 새 노트 생성
  const 새노트생성하기 = (폴더아이디: string, 노트제목: string): string => {
    const 새노트: 노트타입 = {
      아이디: `note-${Date.now()}`,
      제목: 노트제목,
      내용: '',
      요약: '',
      채팅메시지목록: [],
      생성시간: new Date(),
      수정시간: new Date(),
    };

    폴더목록설정(이전목록 => 
      이전목록.map(폴더 => 
        폴더.아이디 === 폴더아이디 
          ? { ...폴더, 노트목록: [...폴더.노트목록, 새노트] }
          : 폴더
      )
    );

    // 활성 폴더의 노트 목록도 업데이트
    if (활성폴더?.아이디 === 폴더아이디) {
      활성폴더설정(이전폴더 => 
        이전폴더 ? { ...이전폴더, 노트목록: [...이전폴더.노트목록, 새노트] } : null
      );
    }

    활성노트설정(새노트);
    console.log('새 노트 생성됨:', 노트제목);
    return 새노트.아이디;
  };

  // 노트 삭제
  const 노트삭제하기 = (폴더아이디: string, 노트아이디: string) => {
    폴더목록설정(이전목록 => 
      이전목록.map(폴더 => 
        폴더.아이디 === 폴더아이디 
          ? { ...폴더, 노트목록: 폴더.노트목록.filter(노트 => 노트.아이디 !== 노트아이디) }
          : 폴더
      )
    );

    // 활성 노트가 삭제된 노트라면 null로 설정
    if (활성노트?.아이디 === 노트아이디) {
      활성노트설정(null);
    }

    // 활성 폴더의 노트 목록도 업데이트
    if (활성폴더?.아이디 === 폴더아이디) {
      활성폴더설정(이전폴더 => 
        이전폴더 ? { 
          ...이전폴더, 
          노트목록: 이전폴더.노트목록.filter(노트 => 노트.아이디 !== 노트아이디) 
        } : null
      );
    }
    console.log('노트 삭제됨:', 노트아이디);
  };

  // 노트 업데이트
  const 노트업데이트하기 = (노트아이디: string, 업데이트내용: Partial<노트타입>) => {
    const 수정시간 = new Date();
    const 전체업데이트내용 = { ...업데이트내용, 수정시간 };

    폴더목록설정(이전목록 => 
      이전목록.map(폴더 => ({
        ...폴더,
        노트목록: 폴더.노트목록.map(노트 => 
          노트.아이디 === 노트아이디 ? { ...노트, ...전체업데이트내용 } : 노트
        )
      }))
    );

    // 활성 노트도 업데이트
    if (활성노트?.아이디 === 노트아이디) {
      활성노트설정(이전노트 => 이전노트 ? { ...이전노트, ...전체업데이트내용 } : null);
    }

    // 활성 폴더의 노트 목록도 업데이트
    if (활성폴더) {
      활성폴더설정(이전폴더 => 
        이전폴더 ? {
          ...이전폴더,
          노트목록: 이전폴더.노트목록.map(노트 => 
            노트.아이디 === 노트아이디 ? { ...노트, ...전체업데이트내용 } : 노트
          )
        } : null
      );
    }
    console.log('노트 업데이트됨:', 노트아이디, 업데이트내용);
  };

  // 새 메시지 추가 (하위 메시지 지원)
  const 새메시지추가하기 = (노트아이디: string, 메시지텍스트: string, 옵션?: { category?: string; author?: string; 부모메시지아이디?: string }) => {
    const 새메시지: 채팅메시지타입 = {
      아이디: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      텍스트: 메시지텍스트,
      타임스탬프: new Date(),
      ...(옵션?.category && { 카테고리: 옵션.category }),
      ...(옵션?.author && { 작성자: 옵션.author }),
      하위메시지목록: []
    };

    // 하위 메시지인 경우 부모 메시지에 추가하는 헬퍼 함수
    const 메시지목록업데이트 = (메시지목록: 채팅메시지타입[]): 채팅메시지타입[] => {
      return 메시지목록.map(메시지 => {
        if (메시지.아이디 === 옵션?.부모메시지아이디) {
          return {
            ...메시지,
            하위메시지목록: [...(메시지.하위메시지목록 || []), 새메시지]
          };
        } else if (메시지.하위메시지목록 && 메시지.하위메시지목록.length > 0) {
          return {
            ...메시지,
            하위메시지목록: 메시지목록업데이트(메시지.하위메시지목록)
          };
        }
        return 메시지;
      });
    };

    const 노트업데이트함수 = (노트: 노트타입) => {
      if (노트.아이디 === 노트아이디) {
        if (옵션?.부모메시지아이디) {
          // 하위 메시지인 경우
          return {
            ...노트,
            채팅메시지목록: 메시지목록업데이트(노트.채팅메시지목록),
            수정시간: new Date()
          };
        } else {
          // 일반 메시지인 경우
          return {
            ...노트,
            채팅메시지목록: [...노트.채팅메시지목록, 새메시지],
            수정시간: new Date()
          };
        }
      }
      return 노트;
    };

    폴더목록설정(이전목록 => 
      이전목록.map(폴더 => ({
        ...폴더,
        노트목록: 폴더.노트목록.map(노트업데이트함수)
      }))
    );

    // 활성 노트도 업데이트
    if (활성노트?.아이디 === 노트아이디) {
      활성노트설정(이전노트 => 이전노트 ? 노트업데이트함수(이전노트) : null);
    }

    // 활성 폴더의 노트도 업데이트
    if (활성폴더) {
      활성폴더설정(이전폴더 => 
        이전폴더 ? {
          ...이전폴더,
          노트목록: 이전폴더.노트목록.map(노트업데이트함수)
        } : null
      );
    }
    
    const 메시지타입 = 옵션?.부모메시지아이디 ? '하위 메시지' : '일반 메시지';
    console.log(`새 ${메시지타입} 추가됨:`, 메시지텍스트, 옵션);
  };

  // 데이터 초기화
  const 데이터초기화하기 = () => {
    const 확인 = window.confirm('모든 데이터가 삭제됩니다. 정말 초기화하시겠습니까?');
    if (확인) {
      try {
        localStorage.removeItem(저장소키.폴더목록);
        localStorage.removeItem(저장소키.활성폴더아이디);
        localStorage.removeItem(저장소키.활성노트아이디);
        
        폴더목록설정(초기데이터);
        활성폴더설정(초기데이터[0]);
        활성노트설정(초기데이터[0]?.노트목록[0] || null);
        
        console.log('데이터가 초기화되었습니다');
        alert('데이터가 초기화되었습니다.');
      } catch (오류) {
        console.error('데이터 초기화 실패:', 오류);
        alert('데이터 초기화에 실패했습니다.');
      }
    }
  };

  // 데이터 내보내기 (JSON)
  const 데이터내보내기 = (): string => {
    try {
      const 내보낼데이터 = {
        폴더목록,
        내보낸시간: new Date().toISOString(),
        버전: '1.0'
      };
      return JSON.stringify(내보낼데이터, null, 2);
    } catch (오류) {
      console.error('데이터 내보내기 실패:', 오류);
      return '';
    }
  };

  // 데이터 가져오기 (JSON)
  const 데이터가져오기 = (데이터문자열: string): boolean => {
    try {
      const 파싱된데이터 = JSON.parse(데이터문자열);
      
      if (!파싱된데이터.폴더목록 || !Array.isArray(파싱된데이터.폴더목록)) {
        throw new Error('올바르지 않은 데이터 형식입니다');
      }

      // Date 객체 복원
      const 복원된폴더목록 = 파싱된데이터.폴더목록.map((폴더: any) => ({
        ...폴더,
        노트목록: 폴더.노트목록.map((노트: any) => ({
          ...노트,
          생성시간: new Date(노트.생성시간),
          수정시간: new Date(노트.수정시간),
          채팅메시지목록: 노트.채팅메시지목록.map((메시지: any) => {
            const 복원된메시지 = {
              ...메시지,
              타임스탬프: new Date(메시지.타임스탬프),
              하위메시지목록: 메시지.하위메시지목록 ? 메시지.하위메시지목록.map((하위메시지: any) => ({
                ...하위메시지,
                타임스탬프: new Date(하위메시지.타임스탬프)
              })) : []
            };
            return 복원된메시지;
          })
        }))
      }));

      폴더목록설정(복원된폴더목록);
      
      // 첫 번째 폴더와 노트를 활성으로 설정
      if (복원된폴더목록.length > 0) {
        활성폴더설정(복원된폴더목록[0]);
        활성노트설정(복원된폴더목록[0].노트목록[0] || null);
      } else {
        활성폴더설정(null);
        활성노트설정(null);
      }

      console.log('데이터 가져오기 성공');
      return true;
    } catch (오류) {
      console.error('데이터 가져오기 실패:', 오류);
      alert('올바르지 않은 데이터 형식입니다.');
      return false;
    }
  };

  const 컨텍스트값: 앱상태컨텍스트타입 = {
    폴더목록,
    활성폴더,
    활성노트,
    폴더선택하기,
    새폴더생성하기,
    폴더삭제하기,
    폴더이름변경하기,
    폴더설정업데이트하기,
    노트선택하기,
    새노트생성하기,
    노트삭제하기,
    노트업데이트하기,
    새메시지추가하기,
    데이터초기화하기,
    데이터내보내기,
    데이터가져오기,
  };

  return (
    <앱상태컨텍스트.Provider value={컨텍스트값}>
      {children}
    </앱상태컨텍스트.Provider>
  );
};

// 커스텀 훅
export const 앱상태사용하기 = () => {
  const 상태 = useContext(앱상태컨텍스트);
  if (!상태) {
    throw new Error('앱상태사용하기는 앱상태제공자 내부에서만 사용할 수 있습니다');
  }
  return 상태;
};